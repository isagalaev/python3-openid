from openid import xrds
from openid.yadis.filters import mkFilter
from openid.yadis.discover import fetch_data, DiscoveryFailure


def getServiceEndpoints(url, flt=None):
    """Perform the Yadis protocol on the input URL and return an
    iterable of resulting endpoint objects.

    @param flt: A filter object or something that is convertable to
        a filter object (using mkFilter) that will be used to generate
        endpoint objects. This defaults to generating BasicEndpoint
        objects.

    @param url: The URL on which to perform the Yadis protocol

    @return: The normalized identity URL and an iterable of endpoint
        objects generated by the filter function.

    @rtype: (str, [endpoint])

    @raises DiscoveryFailure: when Yadis fails to obtain an XRDS document.
    """
    try:
        et = xrds.parseXRDS(fetch_data(url))
        endpoints = applyFilter(url, et, flt)
    except xrds.XRDSError as err:
        raise DiscoveryFailure(str(err), None)
    return (url, endpoints)

def applyFilter(uri, et, func=None):
    """Generate an iterable of endpoint objects given this input data,
    presumably from the result of performing the Yadis protocol.

    @param uri: The input URL, after following redirects,
        as in the Yadis protocol.


    @param et: The XML text the XRDS file fetched from the
        normalized URI.
    @type et: str

    """
    flt = mkFilter(func)
    if not hasattr(et, 'getroot'):
        et = xrds.parseXRDS(et)

    endpoints = []
    for service_element in xrds.iterServices(et):
        endpoints.extend(
            flt(uri, service_element))

    return endpoints
