from functools import partial

from openid import xrds
from openid.yadis.discover import fetch_data, DiscoveryFailure


def getServiceEndpoints(url, flt=None):
    """Perform the Yadis protocol on the input URL and return an
    iterable of resulting endpoint objects.

    @param flt: A filter object or something that is convertable to
        a filter object (using mkFilter) that will be used to generate
        endpoint objects. This defaults to generating BasicEndpoint
        objects.

    @param url: The URL on which to perform the Yadis protocol

    @return: The normalized identity URL and an iterable of endpoint
        objects generated by the filter function.

    @rtype: (str, [endpoint])

    @raises DiscoveryFailure: when Yadis fails to obtain an XRDS document.
    """
    try:
        et = xrds.parseXRDS(fetch_data(url))
        endpoints = parse_services(url, et, flt)
    except xrds.XRDSError as err:
        raise DiscoveryFailure(str(err), None)
    return (url, endpoints)


def filter_services(filter, yadis_url, elements):
    result = []
    for service_element in elements:
        service_uris = xrds.sortedURIs(service_element) or [None]
        endpoints = [filter(uri, yadis_url, service_element) for uri in service_uris]
        result.extend([e for e in endpoints if e is not None])
    return result


def parse_services(uri, et, filter):
    if not hasattr(et, 'getroot'):
        et = xrds.parseXRDS(et)
    return filter_services(filter, uri, xrds.iterServices(et))
